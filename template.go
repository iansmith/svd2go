package svd

var preambleTemplateText = `
{{if ne .Tags ""}}
// +build {{.Tags}}
xxxblankxxx
//
{{end}}
//
// DO NOT EDIT THIS FILE!  YOUR CHANGES WILL BE OVERWRITTEN!
// 
// This file was machine generated from the system description file
// '{{.SourceFilename}}'.  You can obtain the latest version of svd2go
// and the system description files at github.com/iansmith/svd2go
//

package {{.Package}} 
import "{{.Import}}"
{{/* Emit the type of each register */}}
{{range .Peripheral}}
{{range .Register}}
{{if ne .TypeName ""}}
type {{printf "%sDef" .TypeName}} volatile.Register32
{{end}} {{/*closes if*/}}
{{end}} {{/*closes registers*/}}
{{end}} {{/*closes peripherals*/}}
`

var deviceTemplateText = `
{{/* Emit the struct for each peripheral */}}
{{range .Peripheral}}
type {{printf "%sDef" .TypeName}} struct {
	{{- range .Register}}
		{{if ne .TypeName ""}} 
		{{.Name}} {{printf "%sDef" .TypeName}}   // 0x{{printf "%x" .AddressOffset.Get }}
		{{else}}
		{{if gt .Dim.Get 0}}
			{{.Name}} [{{.Dim.Get}}] volatile.Register32   // 0x{{printf "%x" .AddressOffset.Get }}
		{{else}}
			{{.Name}} volatile.Register32   // 0x{{printf "%x" .AddressOffset.Get }}
		{{end}} {{/*closes inner if for dimensioned array */}}
		{{end}} {{/*closes if*/}}
	{{end}} {{/* closesregisters */}} 
} {{/* closes struct of peripheral */}}
var {{.TypeName}} *{{printf "%sDef" .TypeName}} = (*{{printf "%sDef" .TypeName}})(unsafe.Pointer(MemoryMappedIO + {{.BaseAddress.Get}}))

{{end}} {{/* end of peripherals */}}
`

var bitFieldDeclTemplateText = `
{{if .CanRead}}
{{if eq .BitRange.Width 1}}
func (a *{{printf "%sDef" .RegName}}) {{printf "%sIsSet" .Name}}() bool {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb}}, Ptr:(*volatile.Register32)(a)}
	return b.HasBits()
}
{{else}}
func (a *{{printf "%sDef" .RegName}}) {{.Name}} () uint32 {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb }} ,Ptr:(*volatile.Register32)(a)}
	return b.Get()
}
{{end}} {{/*end of the bit width is 1*/}}
{{end}} {{/*end of can read */}}

{{if .CanWrite}}
{{if eq .BitRange.Width 1}} 
func (a *{{printf "%sDef" .RegName}}) {{printf "Set%s" .Name}}() {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb}},Ptr:(*volatile.Register32)(a)}
	b.Set()
}
func (a *{{printf "%sDef" .RegName}}) {{printf "Clear%s" .Name}}() {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb}},Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
{{else}}
func (a *{{printf "%sDef" .RegName}}) {{printf "Set%s" .Name}}(v uint32) {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb}}, Ptr:(*volatile.Register32)(a)}
	b.SetBits(v)
}
{{end}} {{/*closes if */}}

{{range .EnumeratedValue}}
{{if .Field.CanRead}}
func (a *{{printf "%sDef" .Field.RegName}}) {{.Name}}() bool {
	return (*volatile.Register32)(a).Get()=={{ .Value.Get }}
}
{{end}} {{/* closes if */}}
{{if .Field.CanWrite}}
func (a *{{printf "%sDef" .Field.RegName }}) {{ printf "Set%s" .Name }}()  {
	 (*volatile.Register32)(a).Set({{ .Value.Get }})
}
{{end}} {{/* closes if */}}
{{end}} {{/*closes enumerated values*/}}
{{end}} {{/*closes Can write */}}
`

var constantTemplateText = `
{{range .}}
const {{.Name}} = {{.Value}}
{{end}} {{/*end of constants */}}
`